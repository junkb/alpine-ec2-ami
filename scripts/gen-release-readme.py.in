@PYTHON@
# vim: ts=4 et:

import os
import re
import sys
import functools
import argparse
from datetime import datetime
from distutils.version import StrictVersion

import yaml


README_RE = re.compile("## AMIs.*\Z", re.S)

SECTION = """
### Alpine Linux {release} ({date})
<details><summary><i>click to show/hide</i></summary><p>

{rows}

</p></details>
"""

AMI = " [{id}](https://{r}.console.aws.amazon.com/ec2/home#Images:visibility=public-images;imageId={id}) " + \
      "([launch](https://{r}.console.aws.amazon.com/ec2/home#launchAmi={id})) |"

ARCHS = ["x86_64", "aarch64"]


def find_repo_root():
    path = os.getcwd()

    while ".git" not in set(os.listdir(path)) and path != "/":
        path = os.path.dirname(path)

    if path == "/":
        raise Exception("No repo found, stopping at /")

    return path


# most -> least recent version, edge at end
def ver_cmp(a, b):
    try:
        if StrictVersion(a) < StrictVersion(b):
            return 1
        if StrictVersion(a) > StrictVersion(b):
            return -1
        return 0
    except ValueError:
        # "edge" doesn"t work with StrictVersion
        if a == "edge":
            return 1
        if b == "edge":
            return -1
        return 0


def main(args):
    parser = argparse.ArgumentParser(description="Update release README")
    parser.add_argument("profile", help="name of profile to update")
    args = parser.parse_args()

    release_dir = os.path.join(find_repo_root(), "releases")

    with open(os.path.join(release_dir, args.profile + ".yaml"), "r") as data:
        release_yaml = yaml.safe_load(data)

    sections = {}
    for build, releases in release_yaml.items():
        for release, amis in releases.items():
            for name, info in amis.items():
                version = info["version"]
                arch = info["arch"]
                built = info["build_time"]

                if version in sections:
                    ver = sections[version]
                else:
                    ver = {
                        "release": "",
                        "built": {},
                        "name": {},
                        "ami": {}
                    }

                if (arch not in ver["built"] or
                        ver["built"][arch] < built):
                    ver["release"] = release
                    ver["name"][arch] = name
                    ver["built"][arch] = built

                    for region, ami in info["artifacts"].items():
                        if region not in ver["ami"]:
                            ver["ami"][region] = {}

                        ver["ami"][region][arch] = ami

                sections[version] = ver

    ami_list = "## AMIs\n"

    for version in sorted(list(sections.keys()), key=functools.cmp_to_key(ver_cmp)):
        info = sections[version]
        release = info["release"]
        rows = [
            "| Region |",
            "| ------ |",
        ]

        for arch in ARCHS:
            if arch in info["name"]:
                rows[0] += " {n} |".format(n=info["name"][arch])
                rows[1] += " --- |"

        for region, amis in info["ami"].items():
            row = "| {r} |".format(r=region)
            for arch in ARCHS:
                if arch in amis:
                    row += AMI.format(r=region, id=amis[arch])
            rows.append(row)

        ami_list += SECTION.format(
            release=release.capitalize(),
            date=datetime.utcfromtimestamp(max(info["built"].values())).date(),
            rows="\n".join(rows))

    readme_md = os.path.join(release_dir, "README.md")

    with open(readme_md, "r") as file:
        readme = file.read()

    with open(readme_md, "w") as file:
        file.write(README_RE.sub(ami_list, readme))


if __name__ == "__main__":
    main(sys.argv)
